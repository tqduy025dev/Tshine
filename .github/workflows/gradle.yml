name: Java CI with Gradle

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '8'
        
    - name: Make gradlew executable
      run: chmod +x ${{ github.workspace }}/Server/gradlew

    - name: Build with Gradle
      run: cd ${{ github.workspace }}/Server && ./gradlew build --no-daemon

    - name: Log in to Quay.io
      run: echo ${{ secrets.PASS_QUAYIO }} | docker login quay.io -u ${{ secrets.USER_QUAYIO }} --password-stdin

    - name: Build Docker image
      run: cd ${{ github.workspace }}/Server && docker build -t quay.io/tqduy025_dev/tshine:${{ vars.VERSION_NUMBER }} .

    - name: Push Docker image to Quay.io
      run: docker push quay.io/tqduy025_dev/tshine:${{ vars.VERSION_NUMBER }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Quay.io
        run: echo ${{ secrets.PASS_QUAYIO }} | podman login quay.io -u ${{ secrets.USER_QUAYIO }} --password-stdin

      - name: Deploy to server
       # Sử dụng action "appleboy/ssh-action" để triển khai image lên server thông qua SSH
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASS }}
          script: |
            cd /root/docker-spring
            sudo podman rm -f springcontainer
            sudo podman pull quay.io/tqduy025_dev/tshine:${{ vars.VERSION_NUMBER }}
            sudo podman run -d --name springcontainer -p 0.0.0.0:8080:8080 --env-file tshine.env  -v /root/docker-spring/TShine:/ApplicationFileSystem quay.io/tqduy025_dev/tshine:${{ vars.VERSION_NUMBER }}
        
      - name: Increment version number and update repository variable
        run: |
          OLD_VERSION=$(echo ${{ vars.VERSION_NUMBER }} | cut -d "." -f 2)
          NEW_VERSION=$((OLD_VERSION + 1))
          VERSION_NUMBER=$(echo ${{ vars.VERSION_NUMBER }} | cut -d "." -f 1).${NEW_VERSION}
          echo "VERSION_NUMBER = $VERSION_NUMBER"
          echo $VERSION_NUMBER | gh variable set VERSION_NUMBER --body "$VERSION_NUMBER"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
